import * as ethers from 'ethers'

const abiCoder = ethers.AbiCoder.defaultAbiCoder()

const erc6492Bytecode =
	'0x608060405234801561000f575f5ffd5b50604051610b75380380610b75833981810160405281019061003191906106c7565b5f61004384848461004e60201b60201c565b9050805f526001601ff35b5f7f64926492649264926492649264926492649264926492649264926492649264925f1b610081836104b060201b60201c565b0361023d575f6060808480602001905181019061009e919061076e565b8093508194508295505050505f8373ffffffffffffffffffffffffffffffffffffffff16836040516100d0919061083a565b5f604051808303815f865af19150503d805f8114610109576040519150601f19603f3d011682016040523d82523d5f602084013e61010e565b606091505b505090505f8873ffffffffffffffffffffffffffffffffffffffff163b036101715780610170576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610167906108aa565b60405180910390fd5b5b631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168873ffffffffffffffffffffffffffffffffffffffff16631626ba7e89856040518363ffffffff1660e01b81526004016101d392919061091f565b602060405180830381865afa1580156101ee573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061021291906109a2565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149450505050506104a9565b5f8473ffffffffffffffffffffffffffffffffffffffff163b111561032457631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168473ffffffffffffffffffffffffffffffffffffffff16631626ba7e85856040518363ffffffff1660e01b81526004016102be92919061091f565b602060405180830381865afa1580156102d9573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102fd91906109a2565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161490506104a9565b6041825114610368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035f90610a3d565b60405180910390fd5b6103706104cb565b8290505f8160016003811061038857610387610a5b565b5b602002015190505f826002600381106103a4576103a3610a5b565b5b602002015190505f856040815181106103c0576103bf610a5b565b5b602001015160f81c60f81b60f81c9050601b8160ff16141580156103e85750601c8160ff1614155b15610428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041f90610af8565b60405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff166001888386866040515f81526020016040526040516104619493929190610b31565b6020604051602081039080840390855afa158015610481573d5f5f3e3d5ffd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff16149450505050505b9392505050565b5f6020825110156104bf575f5ffd5b81518201519050919050565b6040518060600160405280600390602082028036833780820191505090505090565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610527826104fe565b9050919050565b6105378161051d565b8114610541575f5ffd5b50565b5f815190506105528161052e565b92915050565b5f819050919050565b61056a81610558565b8114610574575f5ffd5b50565b5f8151905061058581610561565b92915050565b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6105d982610593565b810181811067ffffffffffffffff821117156105f8576105f76105a3565b5b80604052505050565b5f61060a6104ed565b905061061682826105d0565b919050565b5f67ffffffffffffffff821115610635576106346105a3565b5b61063e82610593565b9050602081019050919050565b8281835e5f83830152505050565b5f61066b6106668461061b565b610601565b9050828152602081018484840111156106875761068661058f565b5b61069284828561064b565b509392505050565b5f82601f8301126106ae576106ad61058b565b5b81516106be848260208601610659565b91505092915050565b5f5f5f606084860312156106de576106dd6104f6565b5b5f6106eb86828701610544565b93505060206106fc86828701610577565b925050604084015167ffffffffffffffff81111561071d5761071c6104fa565b5b6107298682870161069a565b9150509250925092565b5f61073d826104fe565b9050919050565b61074d81610733565b8114610757575f5ffd5b50565b5f8151905061076881610744565b92915050565b5f5f5f60608486031215610785576107846104f6565b5b5f6107928682870161075a565b935050602084015167ffffffffffffffff8111156107b3576107b26104fa565b5b6107bf8682870161069a565b925050604084015167ffffffffffffffff8111156107e0576107df6104fa565b5b6107ec8682870161069a565b9150509250925092565b5f81519050919050565b5f81905092915050565b5f610814826107f6565b61081e8185610800565b935061082e81856020860161064b565b80840191505092915050565b5f610845828461080a565b915081905092915050565b5f82825260208201905092915050565b7f5369676e617475726556616c696461746f723a206465706c6f796d656e7400005f82015250565b5f610894601e83610850565b915061089f82610860565b602082019050919050565b5f6020820190508181035f8301526108c181610888565b9050919050565b6108d181610558565b82525050565b5f82825260208201905092915050565b5f6108f1826107f6565b6108fb81856108d7565b935061090b81856020860161064b565b61091481610593565b840191505092915050565b5f6040820190506109325f8301856108c8565b818103602083015261094481846108e7565b90509392505050565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6109818161094d565b811461098b575f5ffd5b50565b5f8151905061099c81610978565b92915050565b5f602082840312156109b7576109b66104f6565b5b5f6109c48482850161098e565b91505092915050565b7f5369676e617475726556616c696461746f72237265636f7665725369676e65725f8201527f3a20696e76616c6964207369676e6174757265206c656e677468000000000000602082015250565b5f610a27603a83610850565b9150610a32826109cd565b604082019050919050565b5f6020820190508181035f830152610a5481610a1b565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f5369676e617475726556616c696461746f72237265636f7665725369676e65725f8201527f3a20696e76616c6964207369676e617475726520762076616c75650000000000602082015250565b5f610ae2603b83610850565b9150610aed82610a88565b604082019050919050565b5f6020820190508181035f830152610b0f81610ad6565b9050919050565b5f60ff82169050919050565b610b2b81610b16565b82525050565b5f608082019050610b445f8301876108c8565b610b516020830186610b22565b610b5e60408301856108c8565b610b6b60608301846108c8565b9594505050505056fe'

export async function verify(
	address: string,
	digest: Uint8Array | string,
	signature: ethers.SignatureLike,
	provider: ethers.AbstractProvider,
): Promise<boolean> {
	if (typeof signature === 'string') {
		// TODO: ERC-8010 validation
		// if (signature.endsWith('8010801080108010801080108010801080108010801080108010801080108010')) {
		// 	const result = await _verifyErc8010(address, digest, signature, provider)
		// 	if (result) return true
		// }
		const result = await verifyErc6492(address, digest, signature, provider)
		if (result) return true
	}
	return verifyEcdsa(address, digest, signature)
}

export async function verifyMessage(
	_address: string,
	_message: Uint8Array | string,
	_signature: ethers.SignatureLike,
	_provider: ethers.AbstractProvider,
): Promise<boolean> {
	throw new Error('TODO')
}

export async function verifyTypedData(
	_domain: ethers.TypedDataDomain,
	_types: Record<string, Array<ethers.TypedDataField>>,
	_value: Record<string, unknown>,
	_signature: ethers.SignatureLike,
	_provider: ethers.AbstractProvider,
): Promise<boolean> {
	throw new Error('TODO')
}

/** @internal */
async function _verifyErc8010(
	_address: string,
	_digest: Uint8Array | string,
	_signature: string,
	_provider: ethers.AbstractProvider,
): Promise<boolean> {
	throw new Error('TODO')
}

/** @internal */
async function verifyErc6492(
	address: string,
	digest: Uint8Array | string,
	signature: string,
	provider: ethers.AbstractProvider,
): Promise<boolean> {
	const data = abiCoder.encode(
		['address', 'bytes32', 'bytes'],
		[address, ethers.hexlify(digest), signature],
	)
	const result = await provider
		.call({
			data: ethers.concat([erc6492Bytecode, data]),
		})
		.catch(() => '0x00')
	return result === '0x01'
}

/** @internal */
function verifyEcdsa(
	address: string,
	digest: Uint8Array | string,
	signature: ethers.SignatureLike,
): boolean {
	try {
		const address_recovered = ethers.recoverAddress(digest, signature)
		return address.toLowerCase() === address_recovered.toLowerCase()
	} catch {
		return false
	}
}
